@page "/"
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives

<h4>Input</h4>
<EditForm Model="_input" OnValidSubmit="@OnEdit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="input-group input-group-sm mb-3">
		<span class="input-group-text">Template format:</span>
		<select class="form-select form-select-sm" @bind="_input.TemplateRegex">
			<option value="">None</option>
			@foreach (var t in TemplateParams.Templates)
			{
				<option value="@t.Pattern">@t.Name</option>
			}
		</select>
	</div>
	<div class="input-group input-group-sm mb-3">
		<span class="input-group-text">Enter Uri:</span>
		<InputText @bind-Value="_input.Uri" class="form-control form-control-sm" />
		<button class="btn btn-primary btn-sm" type="submit">Edit</button>
	</div>
</EditForm>

@if (_base != null)
{
	<h4>Edit</h4>
	<div>Base: <b>@_base</b></div>
	<div>Query Parameters:</div>
	@foreach (var p in _queryParams)
	{
		<QueryEdit Input="@p" OnChanged="RebuildUri" OnDelete="OnDeleteQuery" />
	}
	<div>
		<button class="btn btn-success btn-sm" type="button" @onclick="AddQuerySegment">+</button>
	</div>
	<div>Template Parameters:</div>
	@foreach (var p in _templateParams)
	{
		<QueryEdit Input="@p" OnChanged="RebuildUri" DisableKeyEdit="true" />
	}
	<div>
		<button class="btn btn-success btn-sm" type="button" @onclick="AddTemplateSegment">+</button>
	</div>
}
@if (_output != null)
{
	<h4>Outcome</h4>
	<code class="text-break">
		@_output
	</code>
}


@code {
	private readonly InputModel _input = new();
	private string? _base;
	private string? _output;
	private List<Segment> _queryParams = new();
	private List<Segment> _templateParams = new();

	private void OnEdit()
	{
		var (output, parameters) = TemplateParams.Extract(_input.Uri, _input.TemplateRegex);
		_templateParams = parameters;
		var parts = output.Split('?');
		_base = parts[0];
		var query = parts.Length > 1 ? parts[1] : string.Empty;
		_queryParams = QueryHelpers.ParseQuery(query).OrderBy(x => x.Key).SelectMany(ToInputModel).ToList();
		RebuildUri();
	}

	private static IEnumerable<Segment> ToInputModel(KeyValuePair<string, StringValues> q) => q.Value.Select(v => new Segment(q.Key, v));

	private void RebuildUri()
	{
		if (_base == null)
		{
			_output = null;
			return;
		}
		var query = ToQueryString();

		_output = string.IsNullOrWhiteSpace(query)
			? _base
			: $"{_base}?{query}";
		_output = TemplateParams.Apply(_output, _templateParams);
	}

	private void OnDeleteQuery(Segment s)
	{
		_queryParams.Remove(s);
		RebuildUri();
	}

	private string ToQueryString()
	{
		return string.Join('&', _queryParams.Where(s => !string.IsNullOrWhiteSpace(s.Key))
			.OrderBy(x => x.Key)
			.Select(x => x.Encode()));

	}

	private void AddQuerySegment()
	{
		_queryParams.Add(new Segment());
	}

	private void AddTemplateSegment()
	{
		_templateParams.Add(new Segment(TemplateParams.GetKeyForIndex(_templateParams.Count)));
	}

	class InputModel
	{
		public string Uri { get; set; } = string.Empty;
		public string TemplateRegex { get; set; } = string.Empty;
	}

}